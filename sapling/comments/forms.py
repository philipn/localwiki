from django import forms
from django.template.defaultfilters import linebreaks, striptags
from django.utils.translation import ugettext as _
from utils.static import static_url
from versionutils.versioning.forms import CommentMixin

from models import Comment, CommentConfiguration


class CommentForm(CommentMixin, forms.ModelForm):

    def __init__(self, *args, **kwargs):
        # If we were passed in a comment_config, take it.
        cfg = kwargs.pop('comment_config', None)
        super(CommentForm, self).__init__(*args, **kwargs)
        # Use the heading configured for this page to produce a label.
        if cfg is not None:
            self.fields['content'].label = cfg.heading

    class Meta:
        model = Comment
        fields = ('content',)
        exclude = ('comment',)  # the version comment is autogenerated
        widgets = {'content': forms.widgets.Textarea(attrs={
                    'rows': 2,
                    'class': 'comment-box',
                    'placeholder': _("Comment on this page"),
                  })}

    class Media:
        css = {
            'all': (static_url('css/comments/comments.css'),),
        }

    def clean_content(self):
        # While we accept and store HTML5, we aren't running ckeditor.
        # So, insert paragraphs as needed.
        content = self.cleaned_data['content']
        return linebreaks(content)

    def get_save_comment(self):
        # Include the first 80 bytes or so of the content.
        snippets = striptags(self.cleaned_data['content']).split(' ')
        teaser = ""
        for snippet in snippets:
            teaser += snippet + ' '
            if len(teaser) > 80:
                teaser += '...'
                break
        return _("Comment added: %s") % teaser


class CommentConfigurationForm(CommentMixin, forms.ModelForm):

    class Meta:
        model = CommentConfiguration
        exclude = ('page', 'comment',)

    class Media:
        css = {
            'all': (static_url('css/comments/comments.css'),),
        }

    def get_save_comment(self):
        comment = []
        original = CommentConfiguration.objects.get(pk=self.instance.pk)
        if self.cleaned_data['enabled'] != original.enabled:
            comment.append("commenting %s" %
                ('enabled' if self.cleaned_data['enabled'] else 'disabled'))
        if self.cleaned_data['heading'] != original.heading:
            comment.append("heading changed to '%s'" %
                self.cleaned_data['heading'])

        if len(comment) == 0:
            return "Comment configuration: unchanged."
        else:
            return "Comment configuration: " + ', '.join(comment)
